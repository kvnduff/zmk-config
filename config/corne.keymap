#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

/* use helper macros to define left and right hand keys */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp LS(LC(SPACE))     &kp Q             &kp W              &kp E                &kp R        &kp T            &kp Y           &kp U        &kp I                 &kp O               &kp P                      &kp ESCAPE
&hml LEFT_ALT DELETE  &hml LEFT_META A  &hml LEFT_SHIFT S  &hml LEFT_CONTROL D  &lt 1 F      &kp G            &kp H           &lt 1 J      &hmr RIGHT_CONTROL K  &hmr RIGHT_SHIFT L  &hmr RIGHT_META SEMICOLON  &hmr RIGHT_ALT BACKSPACE
&kp LS(TAB)           &kp Z             &kp X              &kp C                &kp V        &kp B            &kp N           &kp M        &kp COMMA             &kp DOT             &kp FSLH                   &kp TAB
                                                           &kp LEFT_ARROW       &lt 2 SPACE  &kp RIGHT_ARROW  &kp DOWN_ARROW  &lt 3 ENTER  &kp UP_ARROW
            >;
        };

        symbol {
            bindings = <
&to 5      &kp EXCLAMATION  &kp ASTERISK     &kp HASH           &kp DOLLAR         &kp PERCENT     &kp CARET          &kp AMPERSAND   &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &to 4
&kp LC(K)  &kp GRAVE        &kp TILDE        &kp DOUBLE_QUOTES  &kp APOSTROPHE     &kp PIPE        &kp MINUS          &kp UNDERSCORE  &kp EQUAL      &kp PLUS              &kp COLON              &kp RC(U)
&none      &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &kp CAPSLOCK    &kp K_APPLICATION  &kp BACKSLASH   &kp LESS_THAN  &kp GREATER_THAN      &kp QUESTION           &none
                                             &kp HOME           &none              &kp END         &kp PAGE_DOWN      &none           &kp PAGE_UP
            >;
        };

        number {
            bindings = <
&none         &none          &none           &none             &none  &none    &kp SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS   &none
&kp LEFT_ALT  &kp LEFT_META  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &none  &none    &kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS    &kp BACKSPACE
&none         &none          &none           &none             &none  &none    &kp COMMA     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &none
                                             &none             &none  &none    &none         &kp ENTER     &kp NUMBER_0
            >;
        };

        function {
            bindings = <
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none    &none  &none  &none              &none            &none           &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none    &none  &none  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &kp RIGHT_META  &kp RIGHT_ALT
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none    &none  &none  &none              &none            &none           &none
                        &none    &none    &none    &none  &none  &none
            >;
        };

        mouse {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &to 0
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };

        system {
            bindings = <
&sys_reset        &none  &none         &none         &none         &bt BT_CLR    &rgb_ug RGB_TOG  &rgb_ug RGB_EFF                   &rgb_ug RGB_SAI                   &rgb_ug RGB_BRI                    &rgb_ug RGB_HUI                   &to 0
&none             &none  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none         &none            &rgb_ug RGB_EFR                   &rgb_ug RGB_SAD                   &rgb_ug RGB_BRD                    &rgb_ug RGB_HUD                   &none
&ext_power EP_ON  &none  &none         &none         &none         &none         &none            &rgb_ug RGB_COLOR_HSB(22,100,50)  &rgb_ug RGB_COLOR_HSB(281,93,49)  &rgb_ug RGB_COLOR_HSB(326,100,52)  &rgb_ug RGB_COLOR_HSB(139,87,49)  &rgb_ug RGB_COLOR_HSB(198,90,50)
                                       &none         &none         &none         &none            &none                             &none
            >;
        };
    };
};
